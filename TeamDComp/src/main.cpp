/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       C:\Users\Kepples                                          */
/*    Created:      Wed Jan 18 2023                                           */
/*    Description:  Main code for 29295D                                      */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// RollMotor            motor         2               
// RightDriveMotors     motor_group   17, 16          
// LeftDriveMotors      motor_group   18, 19          
// FingerMotor          motor         9               
// ConveyorMotor        motor         1               
// Controller1          controller                    
// Pneumatic            digital_out   H               
// InertialSensor       inertial      13              
// VisionSensor         vision        21              
// Pneumatic2           digital_out   A               
// FlywheelMotor        motor_group   10, 11          
// ---- END VEXCODE CONFIGURED DEVICES ----

bool testingAutonomous = false; // IMPORTANT: CHANGE TO FALSE WHEN RUNNING COMPETITION
int autonomousMode = 2; // 1: THREE SQUARE, 2: TWO SQUARE
bool twoStickMode = true;
double maxSpeed = 0.9;

#pragma region INFORMATION

/** IMPORTANT INFORMATION

Controls:

Axis 3 - Forward and back
Axis 1 - Turning left and right

Button A - Toggle Intake
Button X - Toggle Flywheel
Button Y - Start Finger Sequence

Button UP - Increase Flywheel Speed by 5
Button DOWN - Decrease Flywheel Speed by 5

Button LEFT - Reverse Intake
Button RIGHT - Un-reverse Intake

R1 and R2 - Roll Roller


Controller Messages:

COOKING STARTED - Autonomous started
COOKING FINISHED - Autonomous finished with remaining time

MIX:
  R- at beginning - Intake is reversed
  MIXING - Intake is mixing disks
  MIXED - Intake has currently stopped mixing disk

TOAST:
  TOASTING - Flywheel is running
  TOASTED - Flywheel is not running

JUICE: Battery power

FINGER: Disk pusher
  LAZY - Disk pusher is not active
  BUSY - Disk pusher is in the middle of pushing or returning

TOASTER SPEED: Speed that flywheel is turning at (when on)


*/

#pragma endregion INFORMATION

#pragma region VARIABLES

#include "vex.h"
#include <string>
#include <list>
#include <array>
#include <iostream>

#pragma region FUNNY

std::string importedImage = "AA#B77C69,AB#B89786,AC#A6A29D,AD#A8B4BD,AE#BDC6CA,AF#90898A,AG#564441,AH#6F534B,AI#4C2418,AJ#737473,AK#616262,AL#3F382B,AM#251A0E,AN#050803,AO#D38F6C,AP#6A3B21,AQ#DEA892,AR#9C6B52,AS#FABBA6,AT#FFE7C2,AU#904D2D,AV#FFFFDC,AW#F4B47F,AX#E1CD9C,AY#FDF9A4,AZ#FFD88E,BA#EBA45F,BB#A95D37,BC#BD7345,BD#CF622C,BE#E77D47,BF#350400,BG#84310C,BH#CDC584,BI#3F3B62,BJ#21223C,BK#581501,BL#100E2E,BM#445184,BN#BBA75F,BO#101A58,BP#000246,BQ#293176;";

const int amtofcolors = 43;

std::array<color,amtofcolors> colorsUsed = {};

std::list<int> colorAmts;
std::list<int> colorValues;

int findIndexInString(std::string _str, char _index)
{
    for(int i = 0;i < _str.length();i++)
    {
        if(_index == _str[i])
        {
            return i;
        }
    }
    return -1;
}

int hex2ToValue(std::string _x)
{
    std::string vals = "0123456789ABCDEF";

    int returnVal = 0;
    returnVal += findIndexInString(vals, _x[0]) * 16;
    returnVal += findIndexInString(vals, _x[1]);

    return returnVal;
}

int pow(int num, int p){
  int newNum = 1;
  for(int i = 0;i < p;i ++){
    newNum *=num;
  }
  return newNum;
}

int otherToValue(std::string _x, std::string otherString, int maxLength)
{
    std::string vals = otherString;

    int returnVal = 0;
    for (int i = 0; i < maxLength; i++)
    {
        returnVal += findIndexInString(vals, _x[i]) * pow(otherString.length(), maxLength - i - 1);
    }

    return returnVal;
}

color hexToColor(std::string _hex)
{
    std::string r = "";
    r += _hex[0];
    r += _hex[1];
    std::string g = "";
    g += _hex[2];
    g += _hex[3];
    std::string b = "";
    b += _hex[4];
    b += _hex[5];
    return color(hex2ToValue(r), hex2ToValue(g), hex2ToValue(b));
}

int chartoi(char thechar){
  switch(thechar){
    case '0':
      return 0;
      break;
    case '1':
      return 1;
      break;
    case '2':
      return 2;
      break;
    case '3':
      return 3;
      break;
    case '4':
      return 4;
      break;
    case '5':
      return 5;
      break;
    case '6':
      return 6;
      break;
    case '7':
      return 7;
      break;
    case '8':
      return 8;
      break;
    case '9':
      return 9;
      break;
  }
  return -1;
}

int stoi(std::string strToConvert){
  int lengthOfStr = strToConvert.length();
  int returnedNumber = 0;
  for(int i = 0;i < lengthOfStr;i ++){
    returnedNumber += chartoi(strToConvert[i]) * pow(10, lengthOfStr-i-1);
  }
  return returnedNumber;
}


void importToImage(){
  colorAmts.clear();
  colorValues.clear();

  bool isInColorMode = true;
  int z = 0; // index in imported Image

  int alphaPower = 0;
  std::string alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

  std::string theTemp = "";
  int theColorAt = 0;
  while (isInColorMode)
  {
      if(alphaPower == 0)
      {
          while (importedImage[z] != '#')
          {
              z++;
          }
          alphaPower = z + 0;
          z++;
      }
      else
      {
          z += alphaPower + 1;
      }
      theTemp = importedImage[z];
      for(int i = 1;i < 6;i++)
      {
          theTemp += importedImage[z + i];
      }
      colorsUsed.at(theColorAt) = hexToColor(theTemp);
      if (importedImage[z+6] == ';')
      {
          isInColorMode = false;
      }
      z += 7;

      theColorAt ++;
  }


  while(z < importedImage.length())
  {
      std::string foundColor = "";
      for(int i = 0;i < alphaPower;i++)
      {
          foundColor += importedImage[z + i];
      }

      int foundColorVal = otherToValue(foundColor, alphabet, alphaPower);

      z += alphaPower + 1;
      std::string num = "";
      while (importedImage[z] != '-')
      {
          num += importedImage[z];
          z++;
      }
      int theNum = stoi(num);

      colorAmts.push_back(theNum);
      colorValues.push_back(foundColorVal);

      z++;
  }
}

#pragma endregion FUNNY

using namespace vex;

competition Competition;

float minimumStick = 5;  // Minimum output from controller sticks
bool refreshScreenEveryX = true; // If true, it will refresh every "nextScreenRef" x 20 milliseconds.
                                  // If false, it will refresh every battery % change (Checked every "nextScreenRef")
double turningCap = 1; // 0 to 1

// Temporary Variables for motors
double fwdBackSpd = 0;
double turnSpd = 0;
double leftSpd = 0;
double rightSpd = 0;

double maxAccel = 5;
double accelLeftSpd = 0;
double accelRightSpd = 0;

// Math Functions
int abs(int val){ // Convert integers to their absolute value
  return val < 0 ? -val : val;
}

double absDouble(double val){ // Convert integers to their absolute value
  return val < 0 ? -val : val;
}

float absFloat(float val){ // Convert integers to their absolute value
  return val < 0 ? -val : val;
}

bool conveyorOn = false; // Default to conveyor OFF, boolean that controls whether the conveyor is running
bool flywheelOn = false; // Default to flywheel OFF, boolean that controls whether the flywheeel is running
bool conveyorReversed = false;

int fingerMode = 0; // Finger modes:
/**
0 - Finger is not in motion
1 - Finger is moving to push the flywheel
2 - Finger is moving back to it's original position
*/

// Screen related
int screenRefCount = 300; // Counter that counts up to the nextScreenRef amount
int nextScreenRef = 200; // The amount of 20 msec intervals to the next refresh

int lastBatteryAmt = 0; // Holds the value of the battery without needing to check the battery each time
int screenInformationMode = 3;
/*
0 - Battery (JUICE) percentage
1 - Movement Motor (TRLR-L, TRLR-R) TEMPS
2 - Conveyor Motor (MIX) TEMPS + Flywheel Motor (TST) TEMPS
3 - Pusher Motor (FINGER) TEMPS + Roller Motor (ROLL) temps

*/


// Button related
bool conveyorButtonPressed = false;
bool fingerButtonPressed = false;
bool flywheelButtonPressed = false;

bool flywheelAdjustUpPressed = false;
bool flywheelAdjustDownPressed = false;

bool conveyorUnReverseButtonPressed = false;
bool conveyorReverseButtonPressed = false;

int flywheelAdjustedSpeed = 60;

#pragma endregion VARIABLES

#pragma region SCREEN_FUNCTIONS
void refreshScreen(bool updateRow1, bool updateRow2, bool updateRow3){
  
  // Clear screen
  //Controller1.Screen.clearScreen();

  if(updateRow1){
    // Set cursor to row 1, column 1
    Controller1.Screen.clearLine(1);
    Controller1.Screen.setCursor(1, 1);

    // Print whether or not the conveyor is on or off
    if(conveyorReversed){
      Controller1.Screen.print("R-");
    }
    Controller1.Screen.print("MIX");
    Controller1.Screen.print(conveyorOn ? "ING | " : "ED | ");

    // Print whether finger is active
    Controller1.Screen.print("TOAST");
    Controller1.Screen.print(flywheelOn ? "ING" : "ED");
  }

  if(updateRow2){
    // Set cursor to row 2, column 1
    Controller1.Screen.clearLine(2);
    Controller1.Screen.setCursor(2, 1);

    // Print brain battery amount
    if(screenInformationMode == 0){
      Controller1.Screen.print("JUICE: %d", lastBatteryAmt);
    }
    else if(screenInformationMode == 1){
      Controller1.Screen.print("TRLR-L: %.0f", LeftDriveMotors.temperature(percent));
      Controller1.Screen.print(" TRLR-R: %.0f", RightDriveMotors.temperature(percent));
    }
    else if(screenInformationMode == 2){
      Controller1.Screen.print("MIXER: %.0f", ConveyorMotor.temperature(percent));
      Controller1.Screen.print(" TOAST: %.0f", FlywheelMotor.temperature(percent));
    }
    else if(screenInformationMode == 3){
      Controller1.Screen.print("FINGER: %.0f", FingerMotor.temperature(percent));
      Controller1.Screen.print(" ROLL: %.0f", RollMotor.temperature(percent));
    }
  }
  
  if(updateRow3){
    // Set cursor to row 3, column 1
    Controller1.Screen.clearLine(3);
    Controller1.Screen.setCursor(3, 1);

    // Print whether finger is busy
    Controller1.Screen.print("FINGER:");
    Controller1.Screen.print(fingerMode == 0 ? "LAZY" : "BUSY");
  }
}

void setupScreen(){
  // Clear screen in-case something happens to be on it somehow
  Controller1.Screen.clearScreen();

  // Set-up battery capacity
  lastBatteryAmt = Brain.Battery.capacity();

  // Refresh screen
  refreshScreen(true, true, true);
}

#pragma endregion SCREEN_FUNCTIONS

#pragma region AUTONOMOUS_FUNCTIONS

/** AUTONOMOUS FUNCTIONS **/
void Move(double feet, int speed) { // Input in feet, speed in percent 0-100
  //input is feet, converts to inches, gets radians with arc length, converts to degrees
  float angle = ((feet * 12) / 2.125) * (180/3.14159);
  
  RightDriveMotors.setVelocity(speed, percent);
  RightDriveMotors.spinFor(reverse, angle, deg, false);
  LeftDriveMotors.setVelocity(speed, percent);
  LeftDriveMotors.spinFor(reverse, angle, deg, true);
}

void MovePID(double feet, int speed){ // Input in feet, speed in percent 0-100
  //input is feet, converts to inches, gets radians with arc length, converts to degrees
  float targetAngle = ((feet * 12) / 2.125) * (180/3.14159);
  RightDriveMotors.setPosition(0, degrees);
  LeftDriveMotors.setPosition(0, degrees);

  double turnToAngle = InertialSensor.heading(degrees);
  if(turnToAngle >= 360){
    turnToAngle -= 360;
  }
  else if(turnToAngle < 0){
    turnToAngle += 360;
  }
  double InertialPlus = 0;
  double differenceAngle = turnToAngle - InertialSensor.heading(degrees);

  float Kp = 0.4; // 0.25
  float Ki = 0;
  float Kd = 0;

  float error = 0;
  float lastError = 0;
  float integral = 0;
  float derivative = 0;

  int counter = 0;

  Brain.Screen.clearScreen();
  Brain.Screen.setPenColor(red);
  Brain.Screen.drawLine(0, 120, 479, 120);
  Brain.Screen.setPenColor(white);

  float targetSpeed = 0;
  float curTarget = 0;

  float curRightTarget = 0;


  // For some reason I thought PID was always for distance, turns out it apparently can be used for correcting motors

  int nearTarget = 0;
  while(nearTarget < 20){
    // Angle stuff
    differenceAngle = turnToAngle - (InertialSensor.heading(degrees) + InertialPlus);
    if(absDouble(differenceAngle - 360) < absDouble(differenceAngle)){
      InertialPlus += 360;
      differenceAngle = turnToAngle - (InertialSensor.heading(degrees) + InertialPlus);
    }
    if(absDouble(differenceAngle + 360) < absDouble(differenceAngle)){
      InertialPlus -= 360;
      differenceAngle = turnToAngle - (InertialSensor.heading(degrees) + InertialPlus);
    }

    targetSpeed = (targetAngle - LeftDriveMotors.position(degrees)) / 5;
    if(targetSpeed > speed){
      targetSpeed = speed;
    }
    if(targetSpeed < -speed){
      targetSpeed = -speed;
    }
    if(targetSpeed < 3 && targetSpeed > -3){
      if(targetSpeed < 0){
        targetSpeed = -3;
      }
      else{
        targetSpeed = 3;
      }
    }

    curTarget += (targetSpeed - curTarget) > 3 ? 3 : ((targetSpeed - curTarget) < -3 ? -3 : (targetSpeed-curTarget));

    error = LeftDriveMotors.position(degrees) - RightDriveMotors.position(degrees);

    integral = integral + error;
    derivative = error - lastError;

    LeftDriveMotors.setVelocity(curTarget, percent);
    int rightMove = targetSpeed + (error * Kp) + (integral * Ki) + (derivative * Kd);



    //curRightTarget += (rightMove - curRightTarget) > 3 ? 3 : ((rightMove - curRightTarget) < -3 ? -3 : (rightMove-curRightTarget));
    RightDriveMotors.setVelocity(curTarget - differenceAngle*2, percent);
    
    lastError = error + 0;

    /*
    Brain.Screen.setPenColor(red);
    Brain.Screen.drawLine(counter, 120+(error*5), counter-1, prevPoint);
    prevPoint = 120+(error*5);Brain.Screen.setPenColor(blue);
    Brain.Screen.drawPixel(counter, 120+(integral));
    Brain.Screen.setPenColor(green);
    Brain.Screen.drawPixel(counter, 120+(derivative*5));*/
    counter ++;
    if(counter >= 480){
      counter = 479;
    }

    if(absDouble(targetAngle - LeftDriveMotors.position(degrees)) < 5){
      nearTarget ++;
    }
    else{
      nearTarget = 0;
    }

    LeftDriveMotors.spin(forward);
    RightDriveMotors.spin(forward);

    counter ++;
    wait(20, msec);
  }

  LeftDriveMotors.stop();
  RightDriveMotors.stop();
}

void Turn(int angle, int speed) { // Positive angle spins clockwise?
  int angleAdjust = -angle * 3.6;
  RightDriveMotors.setVelocity(speed, percent);
  RightDriveMotors.spinFor(forward, angleAdjust, deg, false);
  LeftDriveMotors.setVelocity(speed, percent);
  LeftDriveMotors.spinFor(reverse, angleAdjust, deg, true);
}

void TurnA(int angle){ // Accepts any angle from 0 to 359.99, based on clockwise from starting position
  double turnToAngle = angle;
  if(turnToAngle >= 360){
    turnToAngle -= 360;
  }
  else if(turnToAngle < 0){
    turnToAngle += 360;
  }
  

  double turnSpeed = 0;
  double maxSpeed = 40;

  double InertialPlus = 0;
  double difference = turnToAngle - InertialSensor.heading(degrees);

  
  int counter = 0;
  while(counter < 4){
    difference = turnToAngle - (InertialSensor.heading(degrees) + InertialPlus);
    if(absDouble(difference - 360) < absDouble(difference)){
      InertialPlus += 360;
      difference = turnToAngle - (InertialSensor.heading(degrees) + InertialPlus);
    }
    if(absDouble(difference + 360) < absDouble(difference)){
      InertialPlus -= 360;
      difference = turnToAngle - (InertialSensor.heading(degrees) + InertialPlus);
    }

    turnSpeed = absDouble(difference) < 2 ? (difference < 0 ? -2 : 2) : difference;
    turnSpeed = turnSpeed > maxSpeed ? maxSpeed : (turnSpeed < -maxSpeed ? -maxSpeed : turnSpeed);
    
    RightDriveMotors.setVelocity(-turnSpeed, percent);
    RightDriveMotors.spin(forward);
    LeftDriveMotors.setVelocity(-turnSpeed, percent);
    LeftDriveMotors.spin(reverse);

    Brain.Screen.clearLine(1);
    Brain.Screen.setCursor(1, 1);
    Brain.Screen.print("DIFF: %f", difference);

    if(absDouble(difference) < 0.25){
      counter ++;
    }
    else{
      counter = 0;
    }

    wait(20, msec);
  }

  RightDriveMotors.stop();
  LeftDriveMotors.stop();
}

void AdjustRoller(float angleAmount) { // Spins roller at 50 speed for X seconds

/*
  RightDriveMotors.setVelocity(10, percent);
  RightDriveMotors.spin(reverse);
  LeftDriveMotors.setVelocity(10, percent);
  RightDriveMotors.spin(reverse);*/
  wait(0.3, seconds);
  RollMotor.setVelocity(100, percent);
  RollMotor.spinFor(reverse, angleAmount, degrees, true);
  RightDriveMotors.stop();
  LeftDriveMotors.stop();
}

void AdjustFlywheel(int speed){ // Flywheel motor will spin clockwise with a positive speed
  if(speed != 0){
    FlywheelMotor.setVelocity(speed, percent);
    FlywheelMotor.spin(forward);
  }
  else{
    FlywheelMotor.stop();
  }
}

void AdjustConveyor(int speed){ // Conveyor motor will spin clockwise with a positive speed
  if(speed != 0){
    ConveyorMotor.setVelocity(speed, percent);
    ConveyorMotor.spin(reverse);
  }
  else{
    ConveyorMotor.stop();
  }
}

void FingerActivate(int amtOfTimes){ // FINGER ACTIVATE
  int failsafe = 0;

  FingerMotor.setStopping(hold);
  FingerMotor.setTimeout(1, seconds); // Do not hurt kid named finger :(
  //FingerMotor.setPosition(0, turns);

  for(int i = 0;i < amtOfTimes;i ++){
    while(FingerMotor.position(turns) < 0.25) {
      FingerMotor.setVelocity(55, percent);
      FingerMotor.spin(forward);
      wait(10, msec);
    }
    FingerMotor.stop();
    while(FingerMotor.position(turns) > 0 && failsafe < 60){
      FingerMotor.setVelocity(55, percent);
      FingerMotor.spin(reverse);
      failsafe ++;
      wait(10, msec);
    }
    FingerMotor.stop();
    wait(2000, msec); // Give finger a moment
  }
}

#pragma endregion AUTONOMOUS_FUNCTIONS

#pragma region AUTONOMOUS
/** PRE AUTONOMOUS **/
void pre_auton(void) {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();
  FingerMotor.setPosition(0, turns); 
  InertialSensor.calibrate();
  Controller1.Screen.clearScreen();
  Controller1.Screen.setCursor(1, 1);
  Controller1.Screen.print("INERTIAL READY");
  //setupScreen();

  return;
}

/** AUTONOMOUS **/
void StartAutonomous(int mode){ // All autonomous actions should happen here
  LeftDriveMotors.setTimeout(2, seconds);
  RightDriveMotors.setTimeout(2, seconds);
  Brain.Timer.reset();
  if(mode == 1){ // Two-Square Start Plan (TWO DISKS SHOT)

    // Two square start
    MovePID(-0.65, 50); // Move .65 feet away from wall
    TurnA(90); // Turn to face towards roller horionztally
    AdjustFlywheel(73); // Start-up Flywheel

    MovePID(-1.85, 60);
    TurnA(-3); // Turn to face disks
    
    // Activate finger twice
    FingerActivate(2);

    // Turn off flywheel and conveyor as it is no longer needed (conveyor should already be off but just in case apparently)
    AdjustFlywheel(0);
    AdjustConveyor(0);

    Move(-0.5, 20); // This is just to move further back to roller
    AdjustRoller(110); // Roll it baby!
    // This is where Mode 1 ends: If successful, 1 Roller, 2 Discs
  }
  if(mode == 2){ // Three-Square Start Plan (TWO DISKS SHOT)
    Move(-0.2, 20);
    AdjustRoller(155); // Adjust roller

    // Wait for flywheel to start-up
    
    AdjustFlywheel(69); // Start up flywheel
    MovePID(-0.3, 50);
    TurnA(-20);
    wait(4, seconds);
    FingerActivate(2); // Shoot two times
    
    // Turn off flywheel
    AdjustFlywheel(0);
  }
  if(mode == 4){ // Skills Plan (TEN DISKS SHOT), start from three-red square at roller
    Move(-0.2, 20);
    AdjustRoller(180); // Roll first roller

    MovePID(-0.35, 50); // Move away from roller
    AdjustConveyor(100); // Start conveyor
    AdjustFlywheel(73); // Startup Flywheel
    TurnA(135); // Turn conveyor towards yellow disk on line
    MovePID(1.75, 50); // Move towards yellow disk and picking it up
    TurnA(90); // Turn towards 2nd roller
    AdjustConveyor(0);
    Move(-0.8, 20); // Move towards 2nd roller

    AdjustRoller(180); // Roll roller
    
    MovePID(-0.7, 50); // Move away from roller
    TurnA(-6); // Turn towards red basket

    // Activate Finger 3 Times
    FingerActivate(3); // Test point
    AdjustFlywheel(0); // stop Flywheel

    TurnA(45);

    Pneumatic.set(true);
    Pneumatic2.set(true);
  }

  Brain.Screen.clearScreen();
  Brain.Screen.setCursor(1, 1);
  Brain.Screen.print("Time: %f", Brain.Timer.value());
}

void autonomous(void) {

  Controller1.Screen.clearScreen();
  Controller1.Screen.setCursor(1, 1);
  Controller1.Screen.print("COOKING STARTED");

  StartAutonomous(autonomousMode);

  Controller1.Screen.clearScreen();
  Controller1.Screen.setCursor(1, 1);
  Controller1.Screen.print("COOKING");
  Controller1.Screen.setCursor(2, 1);
  Controller1.Screen.print("FINISHED");
}

#pragma endregion AUTONOMOUS

#pragma region RC_FUNCTIONS

void updateConveyor(){ // To toggle the conveyor
  
  // Update conveyor status in-function to prevent wasted computations
  if(conveyorOn){
    // Set conveyor motor to full power (Because why wouldn't you)
    ConveyorMotor.setVelocity(100, percent);
    if(conveyorReversed){
      ConveyorMotor.spin(forward);
    }
    else{
      ConveyorMotor.spin(reverse);
    }
  }
  else{
    // Stop conveyor motor
    ConveyorMotor.stop();
  }

  // Update screen to refresh whether or not "Conveyor: " says "ON" or "OFF"
  refreshScreen(true, false, false);
}

void toggleConveyor(){ // To toggle the conveyor
  // Update the bool controlling whether or not the conveyor is on
  conveyorOn = !conveyorOn;
  
  updateConveyor();
}


void toggleFlywheel(int thespeed){ // To toggle the flywheel
  // Update the bool controlling whether or not the conveyor is on
  flywheelOn = !flywheelOn;
  
  // Update conveyor status in-function to prevent wasted computations
  if(flywheelOn){
    // Set conveyor motor to full power (Because why wouldn't you)
    FlywheelMotor.setVelocity(thespeed, percent);
    FlywheelMotor.spin(forward);
  }
  else{
    // Stop conveyor motor
    FlywheelMotor.stop();
  }

  // Update screen to refresh whether or not "Conveyor: " says "ON" or "OFF"
  refreshScreen(true, false, false);
}

void updateFinger(){
  int failsafe = 0;
  FingerMotor.setStopping(hold);
  FingerMotor.setTimeout(1, seconds); // Do not hurt kid named finger :(
    
  if(fingerMode == 1){ // FINGER OUT!
    FingerMotor.setVelocity(30, percent);
    FingerMotor.spin(forward);
    if(FingerMotor.position(turns) >= 0.2){
      FingerMotor.stop();
      fingerMode = 2;
    }
  }
  else if(fingerMode == 2){ // FINGER RETURN!
    FingerMotor.setVelocity(30, percent);
    FingerMotor.spin(reverse);
    failsafe ++;
    if(FingerMotor.position(turns) < 0 || failsafe >= 30){
      FingerMotor.stop();
      fingerMode = 0;
      if(fingerButtonPressed == false){
        refreshScreen(false, false, true);
      }
    }
  }
  /*
  if(fingerMode == 1){

    FingerMotor.setVelocity(40, percent);
    FingerMotor.spinFor(forward, 60, degrees);
    FingerMotor.spinFor(reverse, 60, degrees);
    FingerMotor.spinToPosition(60, degrees);
    FingerMotor.spinToPosition(20, degrees);

    FingerMotor.stop();
    fingerMode = 0;
  }*/
}

void updateFlywheelSpeed(int speedUpdate){
  flywheelAdjustedSpeed +=speedUpdate;
  if(flywheelAdjustedSpeed > 100){
    flywheelAdjustedSpeed = 100;
  }
  if(flywheelAdjustedSpeed < 5){
    flywheelAdjustedSpeed = 5;
  }
  if(flywheelOn){
    // Set conveyor motor to full power (Because why wouldn't you)
    FlywheelMotor.setVelocity(flywheelAdjustedSpeed, percent);
    FlywheelMotor.spin(forward);
  }
  else{
    // Stop conveyor motor
    FlywheelMotor.stop();
  }

  Controller1.Screen.clearScreen();
  Controller1.Screen.setCursor(1, 1);
  Controller1.Screen.print("TOAST SPEED: %d", flywheelAdjustedSpeed);

  screenRefCount = 0;
  nextScreenRef = 100;

}

#pragma endregion RC_FUNCTIONS

#pragma region RC

void usercontrol(void) {
  // User control code here, inside the loop
  importToImage(); // Put this in pre-auton when competition

  Brain.Screen.clearScreen();
  Brain.Screen.setPenWidth(0);

  Brain.Timer.reset();

  int width = 240;
  
  int x = 0;
  int y = 0;
  // std::list<int>::iterator it=mylist.begin(); it != mylist.end(); ++it
  std::list<int>::iterator itV=colorValues.begin();
  std::list<int>::iterator it=colorAmts.begin();

  setupScreen();

  bool colorsEnded = false;

  while (1) {
    // The funny

    for(int j = 0;j < 2;j ++){
      if(colorsEnded == false){

        Brain.Screen.setFillColor(colorsUsed[*itV]);
        int addX = *it;
        if(x + addX >= width)
        {
            int cutoff = width - x;
            Brain.Screen.drawRectangle(x*2, y*2, cutoff*2, 2);
            addX -= cutoff;
            x = 0;
            y++;
        }
        Brain.Screen.drawRectangle(x*2, y*2, addX*2, 2);
        x += addX;
        itV ++;
        it ++;
        
        if(it == colorAmts.end()){
          colorsEnded = true;
        }
      }
    }

    // Regular boring RC code
    int turnAxis = twoStickMode ? Controller1.Axis1.position(percent) : Controller1.Axis4.position(percent);
    // Left/Right Motors
    if(abs(Controller1.Axis3.position(percent)) + abs(turnAxis) >= minimumStick){
      // Only move if controller sticks are more than the deadband (In case of controller drift)
      // Use dual stick mode, easier to go straight or control turns if necessary
      fwdBackSpd = -Controller1.Axis3.position(percent);
      turnSpd = -turnAxis * 0.85;

      leftSpd = fwdBackSpd - turnSpd;
      rightSpd = fwdBackSpd + turnSpd;

      leftSpd *= maxSpeed;
      rightSpd *= maxSpeed;

      //accelLeftSpd += (leftSpd - accelLeftSpd) > maxAccel ? maxAccel : ((leftSpd - accelLeftSpd) < -maxAccel ? -maxAccel : (leftSpd - accelLeftSpd));
      //accelRightSpd += (rightSpd - accelRightSpd) > maxAccel ? maxAccel : ((rightSpd - accelRightSpd) < -maxAccel ? -maxAccel : (rightSpd - accelRightSpd));
      
      // Set velocities of motors
      LeftDriveMotors.setVelocity(leftSpd, percent);
      RightDriveMotors.setVelocity(rightSpd, percent);
      LeftDriveMotors.spin(forward);
      RightDriveMotors.spin(forward);
      //FlywheelMotor.setVelocity(100, percent);
    }
    else{
      // Stop motors
      leftSpd = 0;
      rightSpd = 0;
      
      accelLeftSpd += (leftSpd - accelLeftSpd) > maxAccel ? maxAccel : ((leftSpd - accelLeftSpd) < -maxAccel ? -maxAccel : (leftSpd - accelLeftSpd));
      accelRightSpd += (rightSpd - accelRightSpd) > maxAccel ? maxAccel : ((rightSpd - accelRightSpd) < -maxAccel ? -maxAccel : (rightSpd - accelRightSpd));

      LeftDriveMotors.setVelocity(accelLeftSpd, percent);
      RightDriveMotors.setVelocity(accelRightSpd, percent);
      LeftDriveMotors.spin(forward);
      RightDriveMotors.spin(forward);
      //FlywheelMotor.stop();
    }


    // Conveyor - Run the "toggleConveyor" function every time the A button is pressed
    if(!conveyorButtonPressed && Controller1.ButtonA.pressing()){
      toggleConveyor();
      conveyorButtonPressed = true;
    }
    if(conveyorButtonPressed && !Controller1.ButtonA.pressing()){
      conveyorButtonPressed = false;
    }

    // Conveyor - Update whether conveyor is reversed or not
    if(!conveyorReverseButtonPressed && Controller1.ButtonLeft.pressing()){
      conveyorReversed = true;
      updateConveyor();
      conveyorReverseButtonPressed = true;
    }
    if(!conveyorUnReverseButtonPressed && Controller1.ButtonRight.pressing()){
      conveyorReversed = false;
      updateConveyor();
      conveyorUnReverseButtonPressed = true;
    }
    
    if(conveyorReverseButtonPressed && !Controller1.ButtonLeft.pressing()){
      conveyorReverseButtonPressed = false;
    }
    if(conveyorUnReverseButtonPressed && !Controller1.ButtonRight.pressing()){
      conveyorUnReverseButtonPressed = false;
    }

    // Flywheel - Run the "toggleFlywheel" function every time the A button is pressed
    if(!flywheelButtonPressed && Controller1.ButtonX.pressing()){
      toggleFlywheel(flywheelAdjustedSpeed);
      flywheelButtonPressed = true;
    }
    if(flywheelButtonPressed && !Controller1.ButtonX.pressing()){
      flywheelButtonPressed = false;
    }
    
    // Flywheel - increase speed when the UP button is pressed
    if(!flywheelAdjustUpPressed && Controller1.ButtonUp.pressing()){
      updateFlywheelSpeed(5);
      flywheelAdjustUpPressed = true;
    }
    if(flywheelAdjustUpPressed && !Controller1.ButtonUp.pressing()){
      flywheelAdjustUpPressed = false;
    }
    
    // Flywheel - decrease speed when the DOWN button is pressed
    if(!flywheelAdjustDownPressed && Controller1.ButtonDown.pressing()){
      updateFlywheelSpeed(-5);
      flywheelAdjustDownPressed = true;
    }
    if(flywheelAdjustDownPressed && !Controller1.ButtonDown.pressing()){
      flywheelAdjustDownPressed = false;
    }

    // Roller - roll based on L1 and R1
    if(Controller1.ButtonL1.pressing()){
      RollMotor.setVelocity(100, percent);
      RollMotor.spin(reverse);
    }
    else if(Controller1.ButtonR1.pressing()){
      RollMotor.setVelocity(100, percent);
      RollMotor.spin(forward);
    }
    else{
      RollMotor.stop();
    }

    // Finger - Update "fingerMode" to 1 to start finger sequence
    
    if(Controller1.ButtonY.pressing() && ((FlywheelMotor.velocity(percent) > flywheelAdjustedSpeed - 2 && FlywheelMotor.velocity(percent) < flywheelAdjustedSpeed + 2) || Controller1.ButtonL2.pressing())){ 
      FingerMotor.setVelocity(60, percent);
      FingerMotor.spin(reverse);
    }
    else{
      FingerMotor.stop();
    }
    /*
    if(Controller1.ButtonY.pressing() && ((FlywheelMotor.velocity(percent) > flywheelAdjustedSpeed - 2 && FlywheelMotor.velocity(percent) < flywheelAdjustedSpeed + 2) || Controller1.ButtonL2.pressing())){ //  
      if(fingerMode == 0){ // Only start finger sequence when finger sequence is not running
        fingerMode = 1;
        refreshScreen(false, false, true);
      }
      fingerButtonPressed = true;
    }
    if(fingerButtonPressed && !Controller1.ButtonY.pressing()){
      fingerButtonPressed = false;
      refreshScreen(false, false, true);
    }*/
    //Brain.Screen.clearScreen();
    //Brain.Screen.setCursor(1, 1);
    //Brain.Screen.print(FlywheelMotor.velocity(percent));
    //updateFinger();

    // Expansion
    if(Controller1.ButtonB.pressing() && (Brain.Timer.value() > 95.0 || (Controller1.ButtonL2.pressing() && Controller1.ButtonR2.pressing()))) {
      Pneumatic.set(true);
      Pneumatic2.set(true);
    }
    else{
      //Pneumatic.set(false);
      //Pneumatic2.set(false);
    }

    // Screen Refresh every x msec (Not every check unless you want to REALLY lag the brain/controller)
    screenRefCount +=1;
    if(screenRefCount >= nextScreenRef){ // Have we reached the next screen refresh?
      screenRefCount = 0; // Reset counter
      
      if(nextScreenRef == 100){
        nextScreenRef = 200;
        refreshScreen(true, true, true); // Run refresh screen function
        lastBatteryAmt = Brain.Battery.capacity(); // Update "lastBatteryAmt" to remember what the battery % was last
      }
      else{
        screenInformationMode ++;
        if(screenInformationMode > 3){
          screenInformationMode = 0;
        }
        if(refreshScreenEveryX){ // If the mode is to refresh every x amount of times
          refreshScreen(false, true, false); // Run refresh screen function
          lastBatteryAmt = Brain.Battery.capacity(); // Update "lastBatteryAmt" to remember what the battery % was last
        }
        else{ // If the mode is to refresh if the battery percentage changes
          if(lastBatteryAmt != Brain.Battery.capacity()){ // Check if battery % changed from last refresh
            refreshScreen(false, true, false); // Refresh screen
            lastBatteryAmt = Brain.Battery.capacity(); // Update "lastBatteryAmt" to remember what the battery % was last
          }
        }
      }
    }
    //

    // Wait
    wait(20, msec); // We are anti-wasters.
  }
}

#pragma endregion RC

#pragma region MAIN
int main() {
  // Set up callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);

  // Run the pre-autonomous function.
  pre_auton();

  // Prevent main from exiting with an infinite loop.
  while (true) {
    wait(100, msec);
  }
}
#pragma endregion MAIN